locale("zh-cn")
Sys.setlocale(category = "LC_ALL", locale = "zh-cn")
setwd("E:/图书馆/排架规划/01 - Data Cleaning win")
library(readxl)
library(dplyr)
library(readr)
install.packages("dplyr")
install.packages("dplyr")
setwd("E:/图书馆/排架规划/01 - Data Cleaning win")
library(readxl)
library(dplyr)
library(readr)
data01 <- read_excel("All_Items_LS02.xlsx", sheet="Sheet1", col_types=c("text","text","text","text","logical"))
data02 <- read_excel("PageNum.xlsx", sheet="Sheet1", col_types = c("text", "text"))
head(data01)
data03 <- left_join(data01, data02, by="书目记录号")
head(data03)
nrow(data03)
write_csv(data03, "combined-apr.csv")
as.numeric("xxx")
clear_outliers <- function(x) {
x_num <- as.numeric(x)
if (x_num > 600) {x_num = 250}
if (x_num < 60) {x_num = 250}
if (is.na(x_num)) {x_num = 250}
return (x_num)
}
data03$页码 <- sapply(data03$页码, clear_outliers)
data03$'页码' <- sapply(data03$'页码', clear_outliers)
write_csv(data03, "combined-apr.csv")
tail(data03, n=300)
data03[182201,]
data03$'页码' <- sapply(data03$'页码', clear_outliers)
clear_outliers <- function(x) {
x_num <- as.numeric(x)
if (is.na(x_num)) {return 250}
if (x_num > 600) {x_num = 250}
if (x_num < 60) {x_num = 250}
return (x_num)
}
clear_outliers <- function(x) {
x_num <- as.numeric(x)
if (is.na(x_num)) {return(250)}
if (x_num > 600) {x_num = 250}
if (x_num < 60) {x_num = 250}
return(x_num)
}
data03
data03$'页码' <- sapply(data03$'页码', clear_outliers)
data03[182201,]
write_csv(data03, "combined-apr.csv")
setwd("E:/图书馆/排架规划/02 - Ordering win")
library(dplyr)
comparify_cla_num <- function(cla_num) {
## Designed for Chinese Library Classification scheme
## Replace this function with your library's own classification
## schemes, e.g. Library of Congress Classification, etc.
library(stringr)
cla_num1 <- ''
cla_num2 <- ''
# Clearing all dots in CLC numbers
cla_num <- str_replace_all(cla_num, '\\.', "")
# Clearing all right parenthesis in CLC numbers
cla_num <- str_replace_all(cla_num, '\\)', "")
# Replace "-", "(", and "=" subdivision symbol for automated ordering
# Refer to the ASCII table and your classification number's shelving specifications
cla_num <- str_replace_all(cla_num, '\\-', '!')
cla_num <- str_replace_all(cla_num, '\\(', '#')
cla_num <- str_replace_all(cla_num, '\\=', '$')
# Handle CLC numbers start with T
pad_non_T <- function(x) {
# Input is a CLC number without column
len <- nchar(x)
return_value <- ''
if (str_sub(x, 1, 1) == "T") {
return_value <- x
} else {
part1 <- str_sub(x, 1, 1)
part2 <- ''
if (len > 1) {
part2 <- str_sub(x, 2, len)
}
return_value <- str_c(part1, '.', part2)
}
return (return_value)
}
# Handling CLC numbers with a column ":"
if (str_detect(cla_num, pattern = ":")) {
cla_num_sep <- str_split(cla_num, pattern = ":", simplify = T)
cla_num1 <- cla_num_sep[1]
cla_num2 <- cla_num_sep[2]
} else {
cla_num1 <- cla_num
cla_num2 <- '.'
}
# Run the "T-issue" function
cla_num1 <- pad_non_T(cla_num1)
cla_num2 <- pad_non_T(cla_num2)
# Pad the CLC number 1 & 2
cla_num1 <- str_pad(cla_num1, width = 20, side="right", pad = " ")
cla_num2 <- str_pad(cla_num2, width = 20, side="right", pad = " ")
return (paste(cla_num1, cla_num2, sep=':'))
}
comparify_call_num <- function(call_num){
## This function is designed for ordering the call numbers of book items at the
## Lending Section of Sichuan Provincial Library. You may need to replace this
## function with your own version, to meet the need of your local call numbers.
library(stringr)
library(rebus)
## Detect if this is a previous call number (starts without a year),
## or, a new call number (starts wiht a year)
if (is.na(call_num)) {return ("")}
if (call_num=="") {return ("")}
if (!str_detect(call_num, pattern=START %R% DIGIT %R% DIGIT %R% DIGIT %R% DIGIT %R% "\\/")) {
call_num <- str_c('9999/', call_num)
} else {
call_num <- str_replace_all(call_num, fixed(":v"), "/v")
}
## Now separate the call number into 4 parts
sep_call_num <- str_split(call_num, fixed("/"), n=4, simplify = TRUE)
## "Comparify" the classification numbers
sep_call_num[,2] <- comparify_cla_num(sep_call_num[,2])
## Pad the cutters and sub-cutters
sep_call_num[,3] <- str_pad(sep_call_num[,3], width = 5, side="left", pad = "0")
sep_call_num[,4] <- str_pad(sep_call_num[,4], width = 15, side="right", pad = " ")
comparified = str_c(sep_call_num[1,2],sep_call_num[1,1],sep_call_num[1,3],sep_call_num[1,4],sep="/")
return(comparified)
}
## Test the call number ordering
library(readxl)
setwd("E:/图书馆/排架规划/02 - Ordering win")
xlsx_table <- read_excel("ultimate-combined.xlsx", sheet = "Sheet1")
xlsx_table <- mutate(xlsx_table, call_num_comp = 索取号)
xlsx_table <- filter(xlsx_table, !is.na(索取号))
xlsx_table <- mutate(xlsx_table, call_num_comp = '索取号')
xlsx_table <- filter(xlsx_table, !is.na('索取号'))
head(xlsx_table)
xlsx_table <- mutate(xlsx_table, call_num_comp = xlsx_table$'索取号')
head(xlsx_table)
xlsx_table <- filter(xlsx_table, !is.na('索取号'))
xlsx_table$call_num_comp <- sapply(xlsx_table$'索取号', comparify_call_num)
install.packages('rebus')
library(stringr)
library(rebus)
comparify_call_num <- function(call_num){
## This function is designed for ordering the call numbers of book items at the
## Lending Section of Sichuan Provincial Library. You may need to replace this
## function with your own version, to meet the need of your local call numbers.
## Detect if this is a previous call number (starts without a year),
## or, a new call number (starts wiht a year)
if (is.na(call_num)) {return ("")}
if (call_num=="") {return ("")}
if (!str_detect(call_num, pattern=START %R% DIGIT %R% DIGIT %R% DIGIT %R% DIGIT %R% "\\/")) {
call_num <- str_c('9999/', call_num)
} else {
call_num <- str_replace_all(call_num, fixed(":v"), "/v")
}
## Now separate the call number into 4 parts
sep_call_num <- str_split(call_num, fixed("/"), n=4, simplify = TRUE)
## "Comparify" the classification numbers
sep_call_num[,2] <- comparify_cla_num(sep_call_num[,2])
## Pad the cutters and sub-cutters
sep_call_num[,3] <- str_pad(sep_call_num[,3], width = 5, side="left", pad = "0")
sep_call_num[,4] <- str_pad(sep_call_num[,4], width = 15, side="right", pad = " ")
comparified = str_c(sep_call_num[1,2],sep_call_num[1,1],sep_call_num[1,3],sep_call_num[1,4],sep="/")
return(comparified)
}
## Test the call number ordering
library(readxl)
setwd("E:/图书馆/排架规划/02 - Ordering win")
xlsx_table <- read_excel("ultimate-combined.xlsx", sheet = "Sheet1")
xlsx_table <- mutate(xlsx_table, call_num_comp = xlsx_table$'索取号')
xlsx_table <- filter(xlsx_table, !is.na('索取号'))
comparify_cla_num <- function(cla_num) {
## Designed for Chinese Library Classification scheme
## Replace this function with your library's own classification
## schemes, e.g. Library of Congress Classification, etc.
cla_num1 <- ''
cla_num2 <- ''
# Clearing all dots in CLC numbers
cla_num <- str_replace_all(cla_num, '\\.', "")
# Clearing all right parenthesis in CLC numbers
cla_num <- str_replace_all(cla_num, '\\)', "")
# Replace "-", "(", and "=" subdivision symbol for automated ordering
# Refer to the ASCII table and your classification number's shelving specifications
cla_num <- str_replace_all(cla_num, '\\-', '!')
cla_num <- str_replace_all(cla_num, '\\(', '#')
cla_num <- str_replace_all(cla_num, '\\=', '$')
# Handle CLC numbers start with T
pad_non_T <- function(x) {
# Input is a CLC number without column
len <- nchar(x)
return_value <- ''
if (str_sub(x, 1, 1) == "T") {
return_value <- x
} else {
part1 <- str_sub(x, 1, 1)
part2 <- ''
if (len > 1) {
part2 <- str_sub(x, 2, len)
}
return_value <- str_c(part1, '.', part2)
}
return (return_value)
}
# Handling CLC numbers with a column ":"
if (str_detect(cla_num, pattern = ":")) {
cla_num_sep <- str_split(cla_num, pattern = ":", simplify = T)
cla_num1 <- cla_num_sep[1]
cla_num2 <- cla_num_sep[2]
} else {
cla_num1 <- cla_num
cla_num2 <- '.'
}
# Run the "T-issue" function
cla_num1 <- pad_non_T(cla_num1)
cla_num2 <- pad_non_T(cla_num2)
# Pad the CLC number 1 & 2
cla_num1 <- str_pad(cla_num1, width = 20, side="right", pad = " ")
cla_num2 <- str_pad(cla_num2, width = 20, side="right", pad = " ")
return (paste(cla_num1, cla_num2, sep=':'))
}
xlsx_table$call_num_comp <- sapply(xlsx_table$'索取号', comparify_call_num)
order_idx <- order(xlsx_table$call_num_comp, method="radix")
already_ordered <- xlsx_table[order_idx,]
already_ordered$'索取号'[30000:30100]
already_ordered <- mutate(already_ordered, call_num_comp_trim = str_sub(call_num_comp, 1, 40))
write_csv(already_ordered, "ordered.csv")
tail(already_ordered)
setwd("E:/图书馆/排架规划/03 - Generate thickness")
setwd("E:/图书馆/排架规划/03 - Generate thickness")
library(dplyr)
library(stringr)
train_page = c(242,181,324,232)
train_thick = c(14,12.5,26,18)
model <- lm(train_thick ~ train_page)
print(predict(model, 232))
print(predict(model, data.frame(232))
\
print(predict(model, data.frame(232)))
print(predict(model, data.frame(train_page = 232)))
print(predict(model, data.frame(train_page = 324)))
xlsx_table <- read_excel("ordered.xlsx", sheet = "Sheet1")
print(predict(model, data.frame(train_page = c(324, 200)))
print(predict(model, data.frame(train_page = c(324, 200))))
library(readxl)
print(predict(model, data.frame(train_page = c(324, 200))))
head(xlsx_table)
xlsx_table <- mutate(xlsx_table, thick = xlsx_table$'页码')
xlsx_table$thick <- predict(model, data.frame(train_page = xlsx_table$thick))
xlsx_table$thick <- predict(model, data.frame(train_page = as.numeric(xlsx_table$thick)))
head(xlsx_table)
tail(xlsx_table)
write_csv(xlsx_table, "ordered_with_thick.csv")
